unit MMain;

interface

uses
  Windows, Classes, Forms, Controls, StdCtrls, ExtCtrls, SysUtils,
  Dialogs, Messages, ImgList, Menus, TypInfo,
//  DB, DBAccess, MemDS, Variants, Graphics,
// BusinessSkinForm_1042
  BusinessSkinForm, bsDialogs, bsMessages, bsPngImageList, bsSkinMenus, bsRibbon,
  bsSkinData, bsSkinHint, bsSkinCtrls,
// Raize, kcRaize
  RzLstBox, kcRaizeCtrl, VCL_Helper,
// EhLib
  DBGridEh,
// UniDAC
  Uni;

type
  TfmMain = class(TForm)
    bsBusinessSkinForm: TbsBusinessSkinForm;
    bsSkinData: TbsSkinData;
    bsSkinHint: TbsSkinHint;
    bsResourceStrData: TbsResourceStrData;
    bsSkinPopupMenu: TbsSkinPopupMenu;
    Windows: TMenuItem;
    N4: TMenuItem;
    Cascade1: TMenuItem;
    ileVertical1: TMenuItem;
    ileHorizontal1: TMenuItem;
    N2: TMenuItem;
    CloseAll2: TMenuItem;
    bsPngImageList24: TbsPngImageList;
    bsPngImageList16: TbsPngImageList;
    bsSkinMessage: TbsSkinMessage;
    pmRibbon: TbsSkinPopupMenu;
    N6: TMenuItem;
    Showlayeredborders1: TMenuItem;
    N1: TMenuItem;
    Selectskin2: TMenuItem;
    bsSelectSkinsFromFoldersDialog: TbsSelectSkinsFromFoldersDialog;
    bsSkinStatusBar1: TbsSkinStatusBar;
    pnCorp: TbsSkinStatusPanel;
    bsRibbon1: TbsRibbon;
    bsPage1: TbsRibbonPage;
    btnUser: TbsSkinSpeedButton;
    btnNego: TbsSkinSpeedButton;
    bsSkinMDITabsBar: TbsSkinMDITabsBar;
    bsPage2: TbsRibbonPage;
    bsPage3: TbsRibbonPage;
    bsRibbonPage4: TbsRibbonPage;
    bsRibbonDivider4: TbsRibbonDivider;
    bsSelectSkinDialog: TbsSelectSkinDialog;
    Shape1: TShape;
    bsSkinSpeedButton3: TbsSkinSpeedButton;
    btnPart: TbsSkinSpeedButton;
    pnUserName: TbsSkinStatusPanel;
    pnLocalIP: TbsSkinStatusPanel;
    bsSkinStatusPanel4: TbsSkinStatusPanel;
    btnAcnt: TbsSkinSpeedButton;
    bsCompressedSkinList: TbsCompressedSkinList;
    btnArtc: TbsSkinSpeedButton;
    btnCorpMst: TbsSkinSpeedButton;
    btnGujaMst: TbsSkinSpeedButton;
    bsRibbonDivider1: TbsRibbonDivider;
    bsRibbonDivider2: TbsRibbonDivider;
    btnStk: TbsSkinSpeedButton;
    btnNoti: TbsSkinSpeedButton;
    btnOrdDetail: TbsSkinSpeedButton;
    btnNclr: TbsSkinSpeedButton;
    bsRibbonDivider3: TbsRibbonDivider;
    btnNoCntrOrd: TbsSkinSpeedButton;
    btnExchRt: TbsSkinSpeedButton;
    btnInOut: TbsSkinSpeedButton;
    btnPLList: TbsSkinSpeedButton;
    bsRibbonDivider5: TbsRibbonDivider;
    bsRibbonDivider6: TbsRibbonDivider;
    btnRealConn: TbsSkinSpeedButton;
    btnLossCut: TbsSkinSpeedButton;
    btnOverNgt: TbsSkinSpeedButton;
    btnHybrid: TbsSkinSpeedButton;
    bsRibbonDivider7: TbsRibbonDivider;
    btnBlockIp: TbsSkinSpeedButton;
    bsPage0: TbsRibbonPage;
    btnMngIp: TbsSkinSpeedButton;
    N3: TMenuItem;
    bsRibbonDivider8: TbsRibbonDivider;
    btnPLClsList: TbsSkinSpeedButton;
    btnLogList: TbsSkinSpeedButton;
    btnBatchScl: TbsSkinSpeedButton;
    btnPresent: TbsSkinSpeedButton;
    bsSkinSpeedButton1: TbsSkinSpeedButton;
    btnRealPL: TbsSkinSpeedButton;
    bsRibbonDivider9: TbsRibbonDivider;
    btnRealF: TbsSkinSpeedButton;
    btnRealGF: TbsSkinSpeedButton;
    procedure FormCreate(Sender: TObject);
    procedure btnUserClick(Sender: TObject);
    procedure bsRibbon1Buttons2Click(Sender: TObject);
    procedure bsRibbon1Buttons1Click(Sender: TObject);
    procedure bsSkinSpeedButton3Click(Sender: TObject);
    procedure bsRibbon1Buttons0Click(Sender: TObject);
    procedure btnPartClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure pnLocalIPDblClick(Sender: TObject);
    procedure btnAcntClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure btnArtcClick(Sender: TObject);
    procedure btnCorpMstClick(Sender: TObject);
    procedure btnGujaMstClick(Sender: TObject);
    procedure btnScheduleClick(Sender: TObject);
    procedure btnStkClick(Sender: TObject);
    procedure btnNotiClick(Sender: TObject);
    procedure btnNegoClick(Sender: TObject);
    procedure btnOrdDetailClick(Sender: TObject);
    procedure btnNclrClick(Sender: TObject);
    procedure btnNoCntrOrdClick(Sender: TObject);
    procedure btnExchRtClick(Sender: TObject);
    procedure btnInOutClick(Sender: TObject);
    procedure btnPLListClick(Sender: TObject);
    procedure btnRealConnClick(Sender: TObject);
    procedure btnLossCutClick(Sender: TObject);
    procedure btnOverNgtClick(Sender: TObject);
    procedure btnHybridClick(Sender: TObject);
    procedure btnBlockIpClick(Sender: TObject);
    procedure btnMngIpClick(Sender: TObject);
    procedure bsSkinStatusPanel4DblClick(Sender: TObject);
    procedure Showlayeredborders1Click(Sender: TObject);
    procedure Selectskin2Click(Sender: TObject);
    procedure btnPLClsListClick(Sender: TObject);
    procedure btnLogListClick(Sender: TObject);
    procedure btnBatchSclClick(Sender: TObject);
    procedure btnPresentClick(Sender: TObject);
    procedure bsSkinSpeedButton1Click(Sender: TObject);
    procedure btnRealPLClick(Sender: TObject);
    procedure btnRealFClick(Sender: TObject);
    procedure btnRealGFClick(Sender: TObject);
  private
    { Private declarations }
    procedure Power_Exec;
  protected
	  procedure WndProc(var Message: TMessage); override;
  public
    { Public declarations }
    function Check_FormCreate(sFormName: String): Boolean;
    function bsMsgYesNo(sMsg: String; sTitle: String='확인'): Boolean;
  end;

Const
  SKIN_IDENT = 'GT_SKIN';

var
  fmMain: TfmMain;

  __CFGServerIP: String;
  BASE_SERVERIP: String = '222.234.2.164';
  UPDATE_DNS1: String = 'tradeaplus.co.kr';
  UPDATE_DNS2: String = 'tradeaplus.co.kr';

implementation

uses StdUtils, PacketStruct, MBasic, MUser, MMastDB, MAccount, MLogin, MPart,
  MNego, MInOut, MArtc, MCorp, MScL, MStk, MNoti, MOrdDetail, MNclr, MNoCntrOrd,
  MExchRt, MInOutList, GTNoti, MPLList, MRealConn, MLossCut,
  MOverNgt, MHybrid, MBlockIp, MMngIp, MDBTool, MPLClsList, MLogList, MBatchScl,
  MPresent, MPower, MRealPL, GTUpdate;

{$R *.dfm}

procedure TfmMain.bsRibbon1Buttons0Click(Sender: TObject);
begin
  if bsSelectSkinDialog.Execute( bsSkinData.SkinIndex)
  then
    bsSkinData.SkinIndex := bsSelectSkinDialog.SelectedSkinIndex;
end;

procedure TfmMain.bsRibbon1Buttons1Click(Sender: TObject);
begin
	bsBusinessSkinForm.Cascade;
end;

procedure TfmMain.bsRibbon1Buttons2Click(Sender: TObject);
begin
 	bsBusinessSkinForm.CloseAll;
end;

procedure TfmMain.btnAcntClick(Sender: TObject);
begin
  Form_Create(TfmInOut, fmInout, 3);
end;

procedure TfmMain.btnNoCntrOrdClick(Sender: TObject);
begin
  Form_Create(TfmNoCntrOrd, fmNoCntrOrd, 3);
end;

procedure TfmMain.btnNotiClick(Sender: TObject);
begin
  Form_Create(TfmNoti, fmNoti, 3);
end;

procedure TfmMain.btnOrdDetailClick(Sender: TObject);
begin
  Form_Create(TfmOrdDetail, fmOrdDetail, 3);
end;

procedure TfmMain.btnOverNgtClick(Sender: TObject);
begin
  Form_Create(TfmOverNgt, fmOverNgt, 3);
end;

procedure TfmMain.btnBatchSclClick(Sender: TObject);
begin
  Form_Create(TfmBatchScl, fmBatchScl, 0);
end;

procedure TfmMain.bsSkinSpeedButton1Click(Sender: TObject);
begin
  Form_Create(TfmPower, fmPower, 3);
end;

procedure TfmMain.bsSkinSpeedButton3Click(Sender: TObject);
begin
  if bsSelectSkinsFromFoldersDialog.Execute(ExtractFilePath(ParamStr(0))+'Skins', bsSelectSkinsFromFoldersDialog.SkinName, 'skn')
  then
    bsSkinData.LoadFromCompressedFile(bsSelectSkinsFromFoldersDialog.FileName);
end;

procedure TfmMain.bsSkinStatusPanel4DblClick(Sender: TObject);
begin
	if InputBox('GT DB TOOLS', 'Password', '') = 'gtrade09' then
  begin
    Form_Create(TfmDbTool, fmDbTool, 3);
  end;
end;

procedure TfmMain.btnPartClick(Sender: TObject);
begin
  Form_Create(TfmPart, fmPart, 0);
end;

procedure TfmMain.btnPLClsListClick(Sender: TObject);
begin
  Form_Create(TfmPLClsList, fmPLClsList, 3);
end;

procedure TfmMain.btnPLListClick(Sender: TObject);
begin
  Form_Create(TfmPLList, fmPLList, 3);
end;

procedure TfmMain.btnPresentClick(Sender: TObject);
begin
  Form_Create(TfmPresent, fmPresent, 1);
end;

procedure TfmMain.btnRealConnClick(Sender: TObject);
begin
  Form_Create(TfmRealConn, fmRealConn, 3);
end;

procedure TfmMain.btnRealFClick(Sender: TObject);
begin
	if bsMsgYesNo('국내선물 시세서버를 재실행하시겠습니까?') then MastDB.PM001_Send('F', 'G_F_REAL_F');
end;

procedure TfmMain.btnRealGFClick(Sender: TObject);
begin
	if bsMsgYesNo('해외선물 시세서버를 재실행하시겠습니까?') then MastDB.PM001_Send('F', 'G_F_REAL_GF');
end;

procedure TfmMain.btnRealPLClick(Sender: TObject);
begin
  Form_Create(TfmRealPL, fmRealPL, 3);
end;

procedure TfmMain.btnScheduleClick(Sender: TObject);
begin
  Form_Create(TfmScL, fmUser, 0);
end;

procedure TfmMain.btnStkClick(Sender: TObject);
begin
  Form_Create(TfmStk, fmStk, 3);
end;

procedure TfmMain.btnUserClick(Sender: TObject);
begin
  Form_Create(TfmUser, fmUser, 3);
end;

procedure TfmMain.btnNclrClick(Sender: TObject);
begin
  Form_Create(TfmNclr, fmNclr, 3);
end;

procedure TfmMain.btnNegoClick(Sender: TObject);
begin
  Form_Create(TfmNego, fmNego, 3);
end;

procedure TfmMain.btnArtcClick(Sender: TObject);
begin
  Form_Create(TfmArtc, fmArtc, 3);
end;

procedure TfmMain.btnBlockIpClick(Sender: TObject);
begin
  Form_Create(TfmBlockIp, fmBlockIp, 3);
end;

procedure TfmMain.btnCorpMstClick(Sender: TObject);
begin
  Form_Create(TfmCorp, fmCorp, 0);
end;

procedure TfmMain.btnExchRtClick(Sender: TObject);
begin
  Form_Create(TfmExchRt, fmExchRt, 0);
end;

procedure TfmMain.btnGujaMstClick(Sender: TObject);
begin
  Form_Create(TfmCorp, fmCorp, 0);
end;

procedure TfmMain.btnHybridClick(Sender: TObject);
begin
  Form_Create(TfmHybrid, fmHybrid, 3);
end;

procedure TfmMain.btnInOutClick(Sender: TObject);
begin
  Form_Create(TfmInOutList, fmInOutList, 3);
end;

procedure TfmMain.btnLogListClick(Sender: TObject);
begin
  Form_Create(TfmLogList, fmLogList, 3); 
end;

procedure TfmMain.btnLossCutClick(Sender: TObject);
begin
  Form_Create(TfmLossCut, fmLossCut, 3);
end;

procedure TfmMain.btnMngIpClick(Sender: TObject);
begin
  Form_Create(TfmMngIp, fmMngIp, 3);
end;

procedure TfmMain.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  if bsMsgYesNo('관리자를 종료 하시겠습니까? ') then
  begin
    MastDB.Set_LoginTP(MastDB.dbSQL, __Login_ID, __Local_IP, 'O');
    Set_CFGFile(SKIN_IDENT, 'INDEX', IntToStr(bsSkinData.SkinIndex));

    __DisConnected := True;

    MastDB.iwNotiClient.Disconnect;
    MastDB.tmPolling.Enabled  := False;

    Application.ProcessMessages;
  end
  else CanClose := False;

end;

procedure TfmMain.FormCreate(Sender: TObject);
var
	bLogin: Boolean;
//  sPc001,
  sAppRun: String;
  bUpdateRun: Boolean;
  sList: TStringList;
  iSkin: Integer;
begin
  iSkin := 6;

   __CFGServerIP := ExtractFilePath(ParamStr(0)) + 'GT_INF.CFG';

  Application.ShowMainForm := False;

  bsSkinData.SkinIndex := StrToIntDef(Get_CFGFile(SKIN_IDENT, 'INDEX', IntToStr(iSkin)), iSkin);

  bUpdateRun := ParamCount > 2;

  UPDATE_DNS1 := Get_CFGFile('UPDATE_SERVER', 'ADDRESS1', 'gtrade.codns.com', True, __CFGServerIP);
  UPDATE_DNS2 := Get_CFGFile('UPDATE_SERVER', 'ADDRESS2', 'gtrade.codns.com', True, __CFGServerIP);

  BASE_SERVERIP := Get_CFGFile('G_B_NOTI', 'IP', '', True, __CFGServerIP);
   __DefaultPort := StrToIntDef(Get_CFGFile('G_B_NOTI', 'PORT', '20200', True, __CFGServerIP), 20200);

  // App Update ----------------------------------------------------------------
  if Not bUpdateRun then
  begin
    if AutoUpdate_Run(UPDATE_DNS1, 'mng_info.inf', True, False) then Exit       // 1차 URL
    else if AutoUpdate_Run(UPDATE_DNS2, 'mng_info.inf') then Exit;              // 2차 URL
  end
  else
  begin
  	if (sAppRun = 'UPDATE_RUN') then
    begin
      if FileExists(ExtractFilePath(ParamStr(0)) + 'VER_HIS.TXT') then
      begin
        sList := TStringList.Create;
        try
          sList.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'VER_HIS.TXT');
          bsSkinMessage.MessageDlg2(sList.Text, '업데이트', mtInformation, [mbOK], 0);
        finally
          FreeAndNil(sList);
        end;
      end;
    end;
  end;
  //----------------------------------------------------------------------------

  MastDB := TMastDB.Create(Nil);

  bLogin := Login_Run;

  if Not bLogin then
  begin
  	Application.Terminate;
    Exit;
  end;

  MastDB.iwNotiClient.DataToSend := MastDB.PC001_Send + __EOL;
//  MastDB.Noti_Connect;

  bsRibbon1.Tabs[4].Visible := __Supervisor;

  Application.ShowMainForm := bLogin;
end;

procedure TfmMain.FormShow(Sender: TObject);
begin
	Power_Exec;
  
	pnLocalIP.Caption := GetLocalIP;
  pnCorp.Caption := __Corp_NM;

  GT_NOTICE_WAV := True;
  GT_NOTICE_WAVFILE := ExtractFilePath(ParamStr(0)) +'SOUND\Confirm.wav';
end;

procedure TfmMain.pnLocalIPDblClick(Sender: TObject);
begin
  bsSkinMessage.MessageDlg('DataBase: ' + MastDB.UniConnection.Server, mtInformation, [mbYes], 0)
end;

procedure TfmMain.Power_Exec;
var
	Comp: TComponent;
	i, iTag: Integer;
begin
  MastDB.Power_Open(__Login_ID);

  for i := 1 to bsRibbon1.Tabs.Count - 1 do
  begin
   	bsRibbon1.Tabs[i].Visible := False;
  end;

  for i := 0 to ComponentCount - 1 do
  begin
  	Comp := Components[i];
  	iTag := Comp.Tag;

    if iTag = 0 then Continue;

    ComponetEnabled(Comp, False);

    with MastDB.dbPower do
    begin
      First;

      while Not Eof do
      begin
	  	  if iTag = FieldByName('FORM_ID').AsInteger then
        begin
        	ComponetEnabled(Comp, FieldByName('POWER_SHOW').AsString = 'Y');
        end;

        case iTag of
        	9000: if FieldByName('FORM_ID').AsInteger = 9000 then bsRibbon1.Tabs[4].Visible := FieldByName('POWER_SHOW').AsString = 'Y';
        	9001: if FieldByName('FORM_ID').AsInteger = 9001 then bsRibbon1.Tabs[1].Visible := FieldByName('POWER_SHOW').AsString = 'Y';
        	9002: if FieldByName('FORM_ID').AsInteger = 9002 then bsRibbon1.Tabs[2].Visible := FieldByName('POWER_SHOW').AsString = 'Y';
        end;

        Next;
      end;
    end;
  end;

  bsRibbon1.ActivePage := bsPage1;
end;

procedure TfmMain.Selectskin2Click(Sender: TObject);
var
	i: Integer;
begin
	for i := 1 to Screen.FormCount - 1 do
  	Screen.Forms[i].Close;
end;

procedure TfmMain.Showlayeredborders1Click(Sender: TObject);
begin
  if bsSelectSkinDialog.Execute( bsSkinData.SkinIndex) then
    bsSkinData.SkinIndex := bsSelectSkinDialog.SelectedSkinIndex;
end;

function TfmMain.Check_FormCreate(sFormName: String): Boolean;
var
  i: Integer;
begin
  Result := False;

  for i := 0 to Screen.FormCount - 1 do
  begin
    if Screen.Forms[i].Name = sFormName then
    begin
      Result := True;
      Break;
    end;
  end;
end;

procedure TfmMain.WndProc(var Message: TMessage);
var
  NC001 : TNC001;
  NC002 : TNC002;
  NL002 : TNL002;
  NB001 : TNB001;
  sPacket, sData, sTm, sMsg: String;
begin
  inherited;
  if Message.Msg = WM_USER_NOTI_DATA then                                       // Real Packet
	begin
    sPacket := PChar(Message.LParam);
    sData   := PChar(Message.WParam);

    if sPacket = 'NC001' then
    begin
      StrToRecord(sData, NC001, SizeOf(NC001));
      sTm := ArrToStr(NC001.GT_HEADER.TM);
//      Noti_Show(sTm, '입출금요청', ArrToStr(NC001.NOTI_MSG), 'fmInOut');
      Noti_Show(sTm, '입출금요청', ArrToStr(NC001.NOTI_MSG), 'fmInOut', ExtractFilePath(ParamStr(0)) +'SOUND\입출금.wav');
    end;

    if sPacket = 'NC002' then
    begin
      StrToRecord(sData, NC002, SizeOf(NC002));
      sTm := ArrToStr(NC002.GT_HEADER.TM);
      Noti_Show(sTm, '오버나잇신청', ArrToStr(NC002.NOTI_MSG), 'fmOverNgt', ExtractFilePath(ParamStr(0)) +'SOUND\오버나잇신청.wav');
    end;

    if sPacket = 'NL002' then                                              // 로스컷통보
    begin
      StrToRecord(sData, NL002, SizeOf(NL002));
      sTm  := ArrToStr(NL002.GTN_HEADER.GT_HEADER.TM);
    	sMsg := Format('[ %s ] 님께서 로스컷 되었습니다.', [ArrToStr(NL002.GTN_HEADER.GT_HEADER.USER_ID)]);

    	Noti_Show(sTm, '로스컷 통보', sMsg, '', ExtractFilePath(ParamStr(0)) +'SOUND\로스컷.wav');   
    end;

    if sPacket = 'NB001' then
    begin
      StrToRecord(sData, NB001, SizeOf(NB001));

      if ArrToStr(NB001.NOTI_TP) = '01' then sMsg := '주문/체결처리 오류'
      else if ArrToStr(NB001.NOTI_TP) = '02' then sMsg := '사용자전환 통보'
      else if ArrToStr(NB001.NOTI_TP) = '03' then sMsg := '주문거부 통보';

      sTm  := ArrToStr(NB001.GT_HEADER.TM);
      Noti_Show(sTm, sMsg, ArrToStr(NB001.NOTI_MSG), '');
    end;

  end
  else if Message.Msg = WM_USER_NOTI_RESULT then
  begin
    if PChar(Message.WParam) = 'fmInOut' then
    begin
      if Not Check_FormCreate('fmInOut') then Form_Create(TfmInOut , fmInOut, 3)
      else
      begin
        with fmInOut do
        begin
          Show;
          TbsSkinSpeedButton(FindComponent('btnFilter')).ButtonClick;
        end;
      end;
    end;

    if PChar(Message.WParam) = 'fmOverNgt' then
    begin
      if Not Check_FormCreate('fmOverNgt') then Form_Create(TfmOverNgt , fmOverNgt, 3)
      else
      begin
        with fmOverNgt do
        begin
          Show;
          TbsSkinSpeedButton(FindComponent('btnFilter')).ButtonClick;
        end;
      end;
    end;

    if PChar(Message.WParam) = 'fmHybrid' then
    begin
      if Not Check_FormCreate('fmHybrid') then Form_Create(TfmHybrid , fmHybrid, 3)
      else
      begin
        with fmHybrid do
        begin
          Show;
          TbsSkinSpeedButton(FindComponent('btnFilter')).ButtonClick;
        end;
      end;
    end;

  end;
end;

function TfmMain.bsMsgYesNo(sMsg: String; sTitle: String='확인'): Boolean;
begin
  sMsg := StrReplace(sMsg, '\n', #13#10);
  Result := bsSkinMessage.MessageDlg2(sMsg, sTitle, mtConfirmation, [mbYes, mbNo], 0) = mrYes;
end;

end.
